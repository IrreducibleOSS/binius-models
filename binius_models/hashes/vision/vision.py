# (C) 2024 Irreducible Inc.

# Adaptation of https://github.com/KULeuven-COSIC/Marvellous/blob/master/instance_generator.sage
# We are interested solely in the sponge mode of operation, not the block cipher, at the moment

from abc import ABC, abstractmethod
from typing import ClassVar, Generic, TypeVar

from binius_models.finite_fields.tower import BinaryTowerFieldElem, FanPaarTowerField
from binius_models.hashes.vision.utils import VisionConstants, matrix_vector_multiply

E = TypeVar("E", bound="BinaryTowerFieldElem")


class Vision(ABC, Generic[E]):
    """Vision hash function.
    Use dump_vision_instance.sage to generate the constants for a new instance.
    """

    elem: E
    m: ClassVar[int]  # number of elements in the state (total)
    r: ClassVar[int]  # number of elements in the rate
    c: ClassVar[int]  # number of elements in the capacity
    d: ClassVar[int]  # number of digest elements

    def __init__(self) -> None:
        self.security_level: int = self.c * self.elem.field.degree
        # number of rounds
        self.round_n = 8  # max(10, 2 * ceil((1.0 * self.security_level + self.m + 8) / (8 * self.m)))

        self.constants = self.get_constants()
        self.mds = self.get_mds()

        self.key_schedule: list[list[E]]
        self.state: list[E] = [self.elem.zero() for _ in range(self.m)]

        assert self.d <= self.r, "Modify squeezing function if this is the case."

    @abstractmethod
    def get_constants(self) -> VisionConstants:
        """Return the constants for this instance."""
        pass

    @abstractmethod
    def get_mds(self) -> list[list[E]]:
        """Return the MDS matrix for this instance."""
        pass

    @abstractmethod
    def set_zero_schedule(self) -> None:
        """Sets the key schedule of the all-zero master key. Used for sponge mode."""
        pass

    def sbox_layer(self, state: list[E], pi: int) -> list[E]:
        return [self.sbox(x, pi) for x in state]

    def sbox(self, x: E, pi: int) -> E:
        """Apply the sbox to a state element.
        pi = 0: even sbox, pi_0
        pi = 1: odd sbox, pi_1
        """
        poly = self.constants.b_inv if pi == 0 else self.constants.b

        x_inv = self.elem.zero() if x == self.elem.zero() else x.inverse()

        result = poly[-1]
        for j in range(len(poly) - 1):
            result += poly[j] * x_inv
            x_inv **= 2  # does one squaring more than necessary

        return result

    def update_key_schedule(self, key: list[E]) -> None:
        """Expand the master key into a keyschedule. Use all-zero key for Sponge mode."""

        self.key_schedule = []

        key_injection = self.constants.init_const
        state = [key[i] + key_injection[i] for i in range(self.m)]

        self.key_schedule.append(state)

        for r in range(0, 2 * self.round_n):
            # constants
            key_injection = matrix_vector_multiply(self.constants.matrix_const, key_injection)
            key_injection = [key_injection[i] + self.constants.const_const[i] for i in range(self.m)]

            # key schedule
            state = self.sbox_layer(state, r % 2)
            state = matrix_vector_multiply(self.mds, state)
            state = [state[i] + key_injection[i] for i in range(self.m)]
            self.key_schedule.append(state)

    def encrypt(self, plaintext: list[E]) -> list[E]:
        state = [x + y for x, y in zip(plaintext, self.key_schedule[0])]
        for r in range(2 * self.round_n):
            state = self.sbox_layer(state, r % 2)
            state = matrix_vector_multiply(self.mds, state)
            state = [x + y for x, y in zip(state, self.key_schedule[1 + r])]
        return state

    def sponge_init(self) -> None:
        self.set_zero_schedule()
        self.state = [self.elem.zero() for _ in range(self.m)]

    def sponge_absorb(self, rate: list[E]) -> None:
        assert len(rate) == self.r
        self.state[: self.r] = rate
        self.state = self.encrypt(self.state)

    def sponge_squeeze(self) -> list[E]:
        """Simplest squeeze, because digest < rate"""
        if self.d <= self.r:
            return self.state[: self.d]
        else:
            raise NotImplementedError()

    def sponge_hash(self, message: list[E]) -> list[E]:
        """This assumes the fixed length is the length of the message"""
        # pad input using Keccak padding scheme
        padding_len = self.r - (len(message) % self.r)
        padding_bytes = [0] * padding_len * self.elem.field.bytes_len
        padding_bytes[0] |= 0b10000000
        padding_bytes[-1] |= 0b00000001

        padding_chunks = [
            padding_bytes[i : i + self.elem.field.bytes_len]
            for i in range(0, len(padding_bytes), self.elem.field.bytes_len)
        ]

        padding_elements = [self.elem.from_bytes(bytes(chunk)) for chunk in padding_chunks]
        message.extend(padding_elements)

        self.sponge_init()
        for left in range(0, len(message), self.r):
            self.sponge_absorb(message[left : left + self.r])
        return self.sponge_squeeze()


class Vision32b(Vision):
    """Vision hash function with 32-bit elements.

    Uses 512-bit rate and 256-bit capacity, for a total of 24 elements.
    """

    class Elem(BinaryTowerFieldElem):
        field = FanPaarTowerField(5)

    class MdsElem(BinaryTowerFieldElem):
        field = FanPaarTowerField(3)

    elem = Elem

    m = 24
    r = 16
    c = 8
    d = 8

    def get_constants(self) -> VisionConstants:
        """Generated using the sample_constants utility."""
        # fmt:off
        b = [self.elem(x) for x in [0xdb43e603, 0x391c8e32, 0x9fd55d88, 0x7cf0bc6c]]  # noqa: E501
        b_inv = [self.elem(x) for x in [0x8893af62, 0x3e2116c4, 0x3167d66b, 0x8717451f, 0xfc5ddb11, 0x4a7806a8, 0x9b07f2d2, 0x9a0f2fcc, 0x11420374, 0x3d28a494, 0xef41be4e, 0x71d99823, 0x817f9649, 0x2a5db0bb, 0x4f45419e, 0x5b06b220, 0x3f6b2ec4, 0xb98c0581, 0x579ef594, 0x953ce5ea, 0x53f5eb76, 0x729e7ee9, 0x5643b0b2, 0xa50eda5e, 0x28e9ef07, 0x94f5ebb6, 0x67e766e0, 0xdf829f8e, 0xc2c3aa87, 0x0494b388, 0xd97e2280, 0xd824c646, 0x9fa712f2]]  # noqa: E501
        init_const = [self.elem(x) for x in [0x545e66a7, 0x073fdd58, 0x84362677, 0x95fe8565, 0x06269cd8, 0x9c17909e, 0xf1f0adee, 0x2694c698, 0x94b2788f, 0x5eac14ad, 0x21677a78, 0x5755730b, 0x37cef9cf, 0x2fb31ffe, 0xfc0082ec, 0x609c12f0, 0x102769ee, 0x4732860d, 0xf97935e0, 0x36e77c02, 0xba9e70df, 0x67b701d7, 0x829d77a4, 0xf6ec454d]]  # noqa: E501

        matrix_const = [[self.elem(x) for x in row] for row in [
            [0x1108d307, 0xec7a9199, 0x5de33e41, 0xff840ad4, 0x3a924504, 0x6f8a208b, 0xdd362871, 0xc36a24c2,
             0xeda3984e, 0x9e3751a2, 0xd0004b5e, 0x58e7a69e, 0x11f7d42a, 0x62f17410, 0xca8c7dba, 0x6fd43901,
             0xe4f6985d, 0x6890b1de, 0x65d8652f, 0x7900081c, 0x6237ec32, 0x2d1b4d07, 0xdeb98a71, 0xe42b1a0a],
            [0xe0a55f9f, 0x1355de11, 0x3d80bc0f, 0x485e159c, 0xb7c1da2a, 0x26a36b69, 0xa67b6d9c, 0xcf4d3ba4,
             0x91b6298d, 0x500fd329, 0x31eb526d, 0x850b601b, 0xb07514be, 0x7f242d97, 0x8787ed13, 0xa33e30e5,
             0x5eb3072d, 0xb6b253f0, 0x3c97e604, 0xbe7aa830, 0xa37d06fa, 0xcc988002, 0x56ba30ef, 0x1041ee88],
            [0x6bc512a6, 0x075ebb93, 0xa4538da6, 0xb71f2038, 0xceffba6b, 0xbbe96c4c, 0xa1e13ce3, 0x6c87ef2a,
             0xa3139f62, 0x2c4acf0d, 0x6f4de460, 0x1289208b, 0x106eb3bb, 0xca9b9171, 0x1b9d4248, 0x3dc38cc9,
             0x840c1893, 0x831048ac, 0x47667736, 0x7522713b, 0x9db55119, 0xda6324b4, 0x720b04cf, 0x2caed5bd],
            [0xcc8f36cc, 0x1fc0c9ae, 0x234be4a7, 0x4565e621, 0x3099ee6b, 0xf9ecfbaa, 0x14b28b3e, 0x5e293305,
             0x16122bc3, 0x87078441, 0x328c8192, 0xc75c86d1, 0xcc141723, 0x141841ae, 0x0fec8191, 0x783f477d,
             0xc5518d2a, 0xdfc6552b, 0x6d7ef44c, 0x1f83e675, 0x1abe750b, 0x1f1eba62, 0x241f5967, 0x28faa527],
            [0xb1ca576b, 0x09b1e1dc, 0xade0d3ae, 0xc3ce6a43, 0x6d4a4b6c, 0x38821cbe, 0x3b7060ed, 0xd645dbd2,
             0x8c0c9168, 0xef6c6449, 0x4481f6ca, 0x896f624e, 0x84747516, 0x75dde272, 0x8d0ae03a, 0xe15a828c,
             0xf3ad2ccb, 0x98557f60, 0x33e0f702, 0xd333d762, 0x04c66d30, 0xe4958b14, 0x7f8b569d, 0x670d9a9b],
            [0x90509d7f, 0x9adcefd0, 0x12741f97, 0xc91795aa, 0x4ecdf02f, 0x8d9c91e3, 0xf3421547, 0xb963e5de,
             0xa281ec4c, 0xb3524139, 0x6777299d, 0x23d1675d, 0x9db2d9bb, 0x261b5dc5, 0x0841e27c, 0xeab73e4a,
             0x8d6ead23, 0x607fcda2, 0x72c8217e, 0x46f73848, 0x868e11aa, 0x11eef4a2, 0xf3ab54c4, 0x2cd05ba8],
            [0xb4e8b361, 0xb1b73cae, 0x4af26138, 0xa2706c9b, 0x25b86e94, 0x6d3a3dd3, 0x24002c84, 0xa9c0c35e,
             0xdaf48349, 0x9ab33a67, 0x0ce87d3a, 0x66923746, 0x89c2b0fc, 0x600b1e85, 0x974330bc, 0x3ff03a2e,
             0xdce09562, 0xc2f1a8b4, 0x068b0b8f, 0x95f687ef, 0x9c90441d, 0x17c68af8, 0xbbe0ae8c, 0x0977220a],
            [0xa7f36139, 0x56887e90, 0x6ea48a38, 0xd0dc602b, 0x09f0fd57, 0xc61523cf, 0x109b331e, 0xed9dbe39,
             0xcc0345c7, 0x5f57681a, 0x37670e8a, 0xfab40121, 0x298f80af, 0x2e7f4e44, 0x2944d394, 0x6cf97518,
             0x3e9e61a9, 0x5f470d66, 0x3c213aa7, 0xf3b16f32, 0x8575c1fd, 0x77164b13, 0xe2a7bb94, 0xc1da2a1e],
            [0xfbd2eb5b, 0x94fde9c9, 0xf94d4695, 0x63a8e16f, 0x63c3b096, 0x4299383c, 0x8bee7759, 0x64d23345,
             0x661204b6, 0x9b63d4a7, 0x61ca24c8, 0xc72ff155, 0x43eaf867, 0xc26867bc, 0x13498541, 0x2e6031fd,
             0xc5a37cc5, 0x11c7bcbb, 0x5b5a2b1d, 0xccee17ef, 0x586410e4, 0xf048eecb, 0x658aa18a, 0xc8df0f21],
            [0xd5ecb636, 0x3d42499b, 0x565ad8a6, 0x9e5430be, 0xb0e6f553, 0x7dc33549, 0x6bc7e8db, 0xb02aa685,
             0xb0094065, 0x57bc19a6, 0xaa55a612, 0x323c1958, 0xab994c0a, 0x26b9471a, 0xcd8df824, 0x00a0cf18,
             0x483f95d8, 0xb2dd0490, 0x65347ec6, 0x3b078220, 0x2fc83cff, 0xfe238e9a, 0x0df48724, 0x6e4b21ea],
            [0xdef1960b, 0x3d3fdce8, 0xd13a93a0, 0x4153e6c0, 0x41faac96, 0xf861ca1e, 0x66d4b676, 0xc7ba3e6b,
             0xe5e86937, 0x12984a18, 0x4ab68320, 0xdc998665, 0x865ce15e, 0xf40c2fce, 0x5d92ae8c, 0x258dc776,
             0x37f6c58d, 0x2c5bff1c, 0x3cc5d91a, 0xf8244009, 0xc5ae7b36, 0x4a78daa8, 0x3e62cebd, 0x5fb85623],
            [0x22aa9a5c, 0x4afad2cc, 0x1392a38a, 0x3e5a0558, 0xd6e884aa, 0x40d9e182, 0xd0e89e26, 0x210569d2,
             0x9395e023, 0xb429fedc, 0xee5c4a30, 0x41472caa, 0xb7525451, 0x021a33e7, 0xb1b6247c, 0x32c11c47,
             0x7f681c6b, 0xbe3500e6, 0x0f5ad41f, 0x1c83c8d4, 0x5fa23114, 0xdf8229b1, 0x23b414bd, 0x4ec68613],
            [0xa29abdda, 0x3350412f, 0x3c48f63a, 0x583cc538, 0x7012efef, 0x7dc91145, 0xf10ab4d4, 0xddb56653,
             0xc8117349, 0xf0a92831, 0x6dde832f, 0x0be4ef8a, 0xee0c5bf9, 0x0afb86d6, 0xc117da33, 0xebff60aa,
             0x07413fa6, 0x420b6d83, 0x275160b7, 0x8fb66d03, 0xc495d852, 0xdc1be7d8, 0xaacb1388, 0xa8402d60],
            [0x6af2d77f, 0x8fe4aed3, 0x948678d5, 0x76595e5b, 0x45252576, 0xbef2ea2d, 0xfb71e252, 0x0ed8fcf4,
             0x7b83686e, 0x18a3a132, 0xf745464c, 0x966597db, 0xfa4e2c6b, 0xa8458cc0, 0x6f084e4f, 0x41142caf,
             0xe5697e4d, 0x98f80a8f, 0x7a743a6d, 0xa2d90dda, 0xd5131e90, 0x8b5e88e7, 0xf44ce732, 0xc74eb1c6],
            [0xbef4a961, 0xc0ae671a, 0x296d9748, 0x9a2d4725, 0x1e730bb3, 0xc0b0f235, 0x2797197d, 0x808091fc,
             0x006ac229, 0x2b3c8db8, 0x3485f9d7, 0x521de28d, 0xdcfafb34, 0x4785422c, 0x060e3619, 0x33102f36,
             0x544ca95f, 0x4d65f380, 0x84826cbf, 0xd7ef3944, 0x7dfbb099, 0xb58ad793, 0x25d9a483, 0x08580a95],
            [0x5cb75041, 0x6d2db475, 0xf41ba3e4, 0x838f8b59, 0x60ea1ac5, 0x29182e40, 0x70b62618, 0x58c8d79c,
             0xa85b39e8, 0x6ab56677, 0x6634e86e, 0x5c041113, 0x701eff30, 0xe6dff676, 0x235cbd33, 0x409599fa,
             0x81d2b0aa, 0x66ba001b, 0x8a5f2d86, 0x0f071b47, 0x085f875f, 0x3c840120, 0x66b6140e, 0x9e9cb44c],
            [0xacf1793d, 0xdaa26b90, 0x19a8968b, 0x5c8e9ae0, 0x81850159, 0xdc3f1e80, 0x13d5ce2e, 0x1942fb28,
             0xda17c113, 0x597a6465, 0x0da1919e, 0x43912545, 0x01f84069, 0xc80f0280, 0xcaca8d04, 0x05cdefc9,
             0x2898131c, 0xc58f9382, 0xd52038d3, 0x13e38635, 0xe31fc907, 0xb1366729, 0xeabea2aa, 0x6867adf0],
            [0x3f503f05, 0x76b1170d, 0x6e8803af, 0x841d8a7e, 0x5125be27, 0xbcd07a3c, 0xc17c40b0, 0x224b57ea,
             0x62a9b246, 0x9b3a73a7, 0xf033d5d1, 0x59206f4e, 0xd8eaa375, 0xbec2ff9f, 0xf2fd1a0b, 0xeab1200f,
             0xe20e0711, 0x64df8b56, 0xdc2a2973, 0x18cb0c1c, 0xf4f82e5b, 0x732f1184, 0x42985be7, 0x88f436cd],
            [0xb20f06c1, 0xf479f2bb, 0xe1252249, 0x61d80cbb, 0x80fab6a4, 0x503b8d9d, 0x4889d6bb, 0x61366c41,
             0x03b4467a, 0xd6114932, 0x6e6e88ef, 0xeac3c262, 0x8aa3cdd4, 0xe535972f, 0x142f485a, 0x7857d2ed,
             0x4d60f969, 0x3b0b5e1d, 0x0a9f23ac, 0x0a235aac, 0x36de7127, 0x34532cea, 0xce70aab4, 0x20d6f24f],
            [0x22543427, 0xcb071894, 0x3dc00d69, 0xc2b7ba33, 0xb2a9a12c, 0xbed6a5a7, 0x06240a69, 0xa111aefa,
             0x3ed567a0, 0x4f617033, 0x56e78466, 0x79027e36, 0x74f32f09, 0x95804d70, 0xbec55833, 0x063f1b9e,
             0x706ab0ff, 0x05329e54, 0x04e56d4d, 0x1a1d0bc4, 0x699cfac3, 0xa9d59c23, 0xb7bfab35, 0x3ea262f9],
            [0x81f18f94, 0xf8489f72, 0x4db46c59, 0x46906502, 0x408a6192, 0x9f91b41b, 0xfccc6032, 0x30f5e7b3,
             0x83f05261, 0xdcfa112d, 0xf5618e3d, 0xa7f171d6, 0x272b9d8d, 0x34d2acd6, 0xe4900f75, 0x8a6b0c59,
             0x627482e6, 0x65e9f3a3, 0x59aa4bd3, 0xc5807f4e, 0x31754a05, 0xe06efd2f, 0xe0b4f9b3, 0x7d24c239],
            [0xbe882322, 0xe9d84ae8, 0x716c9822, 0x5726f8c8, 0x13286d00, 0x35df225d, 0x29ef64af, 0x8b3fd194,
             0xeb076443, 0x7f9b28c8, 0x5b9a0f70, 0xcbd606e3, 0xbd198078, 0x07b00de2, 0xcb3bfe5f, 0x39f12198,
             0xf2d82c9f, 0x34516b45, 0x9624fd4a, 0x3ea5aace, 0x8b2f0a0d, 0x2999dc3e, 0x6409fbac, 0x3fc5d430],
            [0x70011997, 0x929a2c0f, 0x584ce413, 0xbfe8a9e8, 0x23818e4e, 0xdab3c865, 0x19f97044, 0x5cdda0f1,
             0x14ce4dd0, 0x6e732db0, 0x6d7a09ab, 0x5cd27095, 0xb82b5fef, 0x4e12ad28, 0x7f89e69f, 0xa18fa21c,
             0xd08270f2, 0xfdd7332d, 0x89019f23, 0xb0622a67, 0x8dc3ea5c, 0xffa3980a, 0x23169bfd, 0xb9f3541f],
            [0x4cb2d0db, 0xe8ccb7e0, 0xc4bd5ad5, 0xbca45ba8, 0xf2847642, 0x44d2751c, 0x5f669322, 0x68ac2b6b,
             0xe8755fc7, 0x89c4435d, 0x8f7ff92c, 0xa867e3dd, 0x26276ed6, 0x65da94f5, 0xc091356d, 0x3c0d8cdd,
             0xc4a84214, 0x793d79f2, 0x6fbbf6ed, 0xcd20ca13, 0x0fd8cff0, 0x2853f0a1, 0x5ebdfcd1, 0xc7ccf32d],
        ]]

        const_const = [self.elem(x) for x in [
             0x8d36811e, 0x761f6307, 0x2e7061c4, 0x091c5558, 0xe2e1a67c, 0xac54f6a2, 0x60e1bd95, 0xf8307596,
             0x9120bc98, 0xa8f3fe14, 0xce4bdc15, 0xb0ba0b6d, 0xa901e2cc, 0x810a93b1, 0xedcf6691, 0x04da059c,
             0x58c77e1f, 0x4a66463b, 0x5d3a8f21, 0xed1a16d4, 0xfb12937d, 0x1ac12409, 0xfb031873, 0x587c2f14]
        ]
        # fmt:on
        return VisionConstants(b, b_inv, init_const, matrix_const, const_const)

    def get_mds(self) -> list[list[Elem]]:
        # fmt:off
        return [[self.elem(x) for x in row] for row in [
            [0xad, 0x3b, 0xd4, 0x25, 0xab, 0x37, 0xd7, 0x2d, 0x9a, 0x4d, 0x6a, 0xd8, 0x90, 0x44, 0x6b, 0xdb, 0x06, 0x0f, 0x0e, 0x04, 0x0d, 0x0c, 0x0a, 0x09],  # noqa: E501
            [0x3b, 0xad, 0x25, 0xd4, 0x37, 0xab, 0x2d, 0xd7, 0x4d, 0x9a, 0xd8, 0x6a, 0x44, 0x90, 0xdb, 0x6b, 0x0f, 0x06, 0x04, 0x0e, 0x0c, 0x0d, 0x09, 0x0a],  # noqa: E501
            [0xd4, 0x25, 0xad, 0x3b, 0xd7, 0x2d, 0xab, 0x37, 0x6a, 0xd8, 0x9a, 0x4d, 0x6b, 0xdb, 0x90, 0x44, 0x0e, 0x04, 0x06, 0x0f, 0x0a, 0x09, 0x0d, 0x0c],  # noqa: E501
            [0x25, 0xd4, 0x3b, 0xad, 0x2d, 0xd7, 0x37, 0xab, 0xd8, 0x6a, 0x4d, 0x9a, 0xdb, 0x6b, 0x44, 0x90, 0x04, 0x0e, 0x0f, 0x06, 0x09, 0x0a, 0x0c, 0x0d],  # noqa: E501
            [0xab, 0x37, 0xd7, 0x2d, 0xad, 0x3b, 0xd4, 0x25, 0x90, 0x44, 0x6b, 0xdb, 0x9a, 0x4d, 0x6a, 0xd8, 0x0d, 0x0c, 0x0a, 0x09, 0x06, 0x0f, 0x0e, 0x04],  # noqa: E501
            [0x37, 0xab, 0x2d, 0xd7, 0x3b, 0xad, 0x25, 0xd4, 0x44, 0x90, 0xdb, 0x6b, 0x4d, 0x9a, 0xd8, 0x6a, 0x0c, 0x0d, 0x09, 0x0a, 0x0f, 0x06, 0x04, 0x0e],  # noqa: E501
            [0xd7, 0x2d, 0xab, 0x37, 0xd4, 0x25, 0xad, 0x3b, 0x6b, 0xdb, 0x90, 0x44, 0x6a, 0xd8, 0x9a, 0x4d, 0x0a, 0x09, 0x0d, 0x0c, 0x0e, 0x04, 0x06, 0x0f],  # noqa: E501
            [0x2d, 0xd7, 0x37, 0xab, 0x25, 0xd4, 0x3b, 0xad, 0xdb, 0x6b, 0x44, 0x90, 0xd8, 0x6a, 0x4d, 0x9a, 0x09, 0x0a, 0x0c, 0x0d, 0x04, 0x0e, 0x0f, 0x06],  # noqa: E501
            [0xa9, 0x0f, 0x7d, 0x24, 0x23, 0x14, 0x45, 0xed, 0x54, 0xdf, 0x62, 0xc0, 0x67, 0xf8, 0x22, 0xf7, 0xd5, 0x47, 0x06, 0xf2, 0x93, 0x83, 0x8b, 0xff],  # noqa: E501
            [0x0f, 0xa9, 0x24, 0x7d, 0x14, 0x23, 0xed, 0x45, 0xdf, 0x54, 0xc0, 0x62, 0xf8, 0x67, 0xf7, 0x22, 0x47, 0xd5, 0xf2, 0x06, 0x83, 0x93, 0xff, 0x8b],  # noqa: E501
            [0x7d, 0x24, 0xa9, 0x0f, 0x45, 0xed, 0x23, 0x14, 0x62, 0xc0, 0x54, 0xdf, 0x22, 0xf7, 0x67, 0xf8, 0x06, 0xf2, 0xd5, 0x47, 0x8b, 0xff, 0x93, 0x83],  # noqa: E501
            [0x24, 0x7d, 0x0f, 0xa9, 0xed, 0x45, 0x14, 0x23, 0xc0, 0x62, 0xdf, 0x54, 0xf7, 0x22, 0xf8, 0x67, 0xf2, 0x06, 0x47, 0xd5, 0xff, 0x8b, 0x83, 0x93],  # noqa: E501
            [0x23, 0x14, 0x45, 0xed, 0xa9, 0x0f, 0x7d, 0x24, 0x67, 0xf8, 0x22, 0xf7, 0x54, 0xdf, 0x62, 0xc0, 0x93, 0x83, 0x8b, 0xff, 0xd5, 0x47, 0x06, 0xf2],  # noqa: E501
            [0x14, 0x23, 0xed, 0x45, 0x0f, 0xa9, 0x24, 0x7d, 0xf8, 0x67, 0xf7, 0x22, 0xdf, 0x54, 0xc0, 0x62, 0x83, 0x93, 0xff, 0x8b, 0x47, 0xd5, 0xf2, 0x06],  # noqa: E501
            [0x45, 0xed, 0x23, 0x14, 0x7d, 0x24, 0xa9, 0x0f, 0x22, 0xf7, 0x67, 0xf8, 0x62, 0xc0, 0x54, 0xdf, 0x8b, 0xff, 0x93, 0x83, 0x06, 0xf2, 0xd5, 0x47],  # noqa: E501
            [0xed, 0x45, 0x14, 0x23, 0x24, 0x7d, 0x0f, 0xa9, 0xf7, 0x22, 0xf8, 0x67, 0xc0, 0x62, 0xdf, 0x54, 0xff, 0x8b, 0x83, 0x93, 0xf2, 0x06, 0x47, 0xd5],  # noqa: E501
            [0xaf, 0x0f, 0x78, 0x2c, 0x2b, 0x10, 0x4c, 0xe2, 0x59, 0xdc, 0x63, 0xc7, 0x66, 0xf3, 0x2a, 0xfc, 0x99, 0x8d, 0x85, 0xf4, 0xd6, 0x4e, 0x06, 0xf9],  # noqa: E501
            [0x0f, 0xaf, 0x2c, 0x78, 0x10, 0x2b, 0xe2, 0x4c, 0xdc, 0x59, 0xc7, 0x63, 0xf3, 0x66, 0xfc, 0x2a, 0x8d, 0x99, 0xf4, 0x85, 0x4e, 0xd6, 0xf9, 0x06],  # noqa: E501
            [0x78, 0x2c, 0xaf, 0x0f, 0x4c, 0xe2, 0x2b, 0x10, 0x63, 0xc7, 0x59, 0xdc, 0x2a, 0xfc, 0x66, 0xf3, 0x85, 0xf4, 0x99, 0x8d, 0x06, 0xf9, 0xd6, 0x4e],  # noqa: E501
            [0x2c, 0x78, 0x0f, 0xaf, 0xe2, 0x4c, 0x10, 0x2b, 0xc7, 0x63, 0xdc, 0x59, 0xfc, 0x2a, 0xf3, 0x66, 0xf4, 0x85, 0x8d, 0x99, 0xf9, 0x06, 0x4e, 0xd6],  # noqa: E501
            [0x2b, 0x10, 0x4c, 0xe2, 0xaf, 0x0f, 0x78, 0x2c, 0x66, 0xf3, 0x2a, 0xfc, 0x59, 0xdc, 0x63, 0xc7, 0xd6, 0x4e, 0x06, 0xf9, 0x99, 0x8d, 0x85, 0xf4],  # noqa: E501
            [0x10, 0x2b, 0xe2, 0x4c, 0x0f, 0xaf, 0x2c, 0x78, 0xf3, 0x66, 0xfc, 0x2a, 0xdc, 0x59, 0xc7, 0x63, 0x4e, 0xd6, 0xf9, 0x06, 0x8d, 0x99, 0xf4, 0x85],  # noqa: E501
            [0x4c, 0xe2, 0x2b, 0x10, 0x78, 0x2c, 0xaf, 0x0f, 0x2a, 0xfc, 0x66, 0xf3, 0x63, 0xc7, 0x59, 0xdc, 0x06, 0xf9, 0xd6, 0x4e, 0x85, 0xf4, 0x99, 0x8d],  # noqa: E501
            [0xe2, 0x4c, 0x10, 0x2b, 0x2c, 0x78, 0x0f, 0xaf, 0xfc, 0x2a, 0xf3, 0x66, 0xc7, 0x63, 0xdc, 0x59, 0xf9, 0x06, 0x4e, 0xd6, 0xf4, 0x85, 0x8d, 0x99],  # noqa: E501
        ]]
        # fmt:on

    def set_zero_schedule(self) -> None:
        # fmt:off
        self.key_schedule = [[self.elem(x) for x in row] for row in [
            [0x545e66a7, 0x073fdd58, 0x84362677, 0x95fe8565, 0x06269cd8, 0x9c17909e, 0xf1f0adee, 0x2694c698, 0x94b2788f, 0x5eac14ad, 0x21677a78, 0x5755730b, 0x37cef9cf, 0x2fb31ffe, 0xfc0082ec, 0x609c12f0, 0x102769ee, 0x4732860d, 0xf97935e0, 0x36e77c02, 0xba9e70df, 0x67b701d7, 0x829d77a4, 0xf6ec454d],  # noqa: E501
            [0x73fa03e1, 0x2551a651, 0x0541031f, 0xec1d59dc, 0x780f0b43, 0x04843f97, 0xd379e20b, 0xbe4d1f58, 0xe4c2f8bb, 0xf29aee17, 0x228e51f2, 0x840ee72b, 0x0cb3b70e, 0xbacc914a, 0x490bfa7e, 0xc2c3018e, 0xf6d13bd2, 0x6a4d1fe1, 0x4c2bc742, 0x4508cb46, 0xed63a2f1, 0x1802f859, 0xa00483b5, 0x56e12e78],  # noqa: E501
            [0xbace7a4a, 0xc3a71400, 0x5a29b316, 0xeedc8d26, 0x51c14d7e, 0x2add9be8, 0xfec386f3, 0x630765dc, 0xaef6c21b, 0x8c98fc1a, 0x3f9c4f9d, 0x399e7231, 0xba238b04, 0x787d67ec, 0x313ad8af, 0xdd622ac3, 0xe0a8d9b8, 0xaa0e6306, 0x29864574, 0x67ee41da, 0x5502278d, 0xa92e20b1, 0x0fdc5328, 0x74dbee7a],  # noqa: E501
            [0x8bd2f341, 0x59dc2758, 0x5146c720, 0x9df43021, 0x0d1c49ea, 0x81d4b0a5, 0xdbfae4d1, 0xc3153118, 0x8a3aec81, 0xeacd8854, 0xdd4b2576, 0x7dd5cee9, 0x5e9e77b7, 0x6b6efd8d, 0xf11db400, 0x0e6258b7, 0x37b3b6e3, 0xed884c61, 0xb948717c, 0x3d7554cf, 0x42419311, 0x422d11d3, 0x5392b2e7, 0x79c1591d],  # noqa: E501
            [0x27df48ae, 0x948bc10e, 0xcb079dc1, 0xed183a37, 0x81dcc076, 0x24cb0490, 0x52d69fb8, 0x8b576666, 0x7499fe4d, 0x8f879e34, 0xcb11780a, 0x5e876b29, 0xb72d96ab, 0xac28e621, 0x18aeca7e, 0xf3d30baf, 0xc7fca53f, 0xf7b3281a, 0xdaf5559f, 0x27aca0b3, 0x9515d3ee, 0xa39fd2e1, 0xf61b52c2, 0x83ec5a0f],  # noqa: E501
            [0x89841f23, 0x8bd0c3e1, 0xde2dd62b, 0x37799416, 0x558834c7, 0x939df560, 0xb1a9f457, 0xcb24dadb, 0x4f702a2a, 0x65ad5822, 0x7ecf577d, 0x728b4092, 0x89e4fa7d, 0x10cd7556, 0x1de77ab7, 0x2374c530, 0x95b289d4, 0xa6ad3862, 0xc6b1a233, 0xac501639, 0x3f6072a3, 0xf8ae7cc4, 0x622f4cf3, 0xf7ccf75b],  # noqa: E501
            [0xaedf6aac, 0xd64356b2, 0x1cbba169, 0x688602ae, 0x6231b358, 0x1fba8b86, 0xf7b83f1c, 0x465c4050, 0x4403e74c, 0x5f51c2f3, 0x1b114a4d, 0x8f32bf48, 0x87990cfc, 0x71b55cb1, 0x73083164, 0x2fbd58ae, 0x59bbcbbf, 0xb0dc1eba, 0xf2f169ff, 0x54cc93e8, 0x975cfc83, 0xbefc67cf, 0xb841429b, 0xff127d64],  # noqa: E501
            [0xd6561783, 0x88153c99, 0x1a04e141, 0x62631076, 0xb20b52a2, 0x1df18264, 0x05176f17, 0x505b2752, 0x914a71aa, 0x1b6cf96d, 0x5a8b3b59, 0x3ab885cc, 0xed662f24, 0xa859f626, 0xd91136bb, 0x6da2d95b, 0x043fd679, 0xb9e685e8, 0xdf796fa5, 0x53fc28a3, 0x0c15dc77, 0x079255d2, 0x3373a2a0, 0xfc6b012e],  # noqa: E501
            [0xb3359ff0, 0xa471acdc, 0x6ad3e18a, 0x4f012f65, 0xebd4392f, 0x25d3af23, 0x7a68469c, 0xd479ea57, 0xb55b6450, 0x86ef0a15, 0xeefd412f, 0xc8e98f30, 0x61e0c12d, 0x36c4680c, 0xe818ab96, 0xfcb765f2, 0xcbb47fea, 0xc9e202a8, 0xc762caec, 0x366f08fd, 0x5e2f3a19, 0x242c8397, 0x638a0042, 0x63f1c9c5],  # noqa: E501
            [0x4e28a23c, 0xdbe6f0db, 0x9cf4faeb, 0x2fde2616, 0x22dedea1, 0x08ef118e, 0xd7f16ae2, 0xa13b30a8, 0x2ceb58c1, 0xca587d86, 0xf6d54fcd, 0x9cd9f3f5, 0x9b0f94a2, 0xdede0863, 0xa608eb2d, 0x4d3c4469, 0x53784235, 0x4cf6aa1e, 0xcb6ec0d5, 0xf334b49e, 0xe5f7a67a, 0x989658a2, 0xa1a672ca, 0x6fb7eced],  # noqa: E501
            [0x2bbdf7b8, 0xa8626256, 0xd95bf688, 0x43245a87, 0xc14af030, 0x28e5933a, 0x3aeb3e0d, 0x169f7dea, 0x4cd4d1e4, 0x8db556b5, 0xdd1a49ea, 0xe64eff5d, 0x8bd56648, 0x2c3422be, 0x5cffb53f, 0x6b7aaa6e, 0xc2a8d1af, 0x7e79bed4, 0xd0b08e51, 0x1861ba54, 0xb7d3c6b4, 0x6a9bd7ca, 0x129d3aa5, 0x809e9413],  # noqa: E501
            [0x52538d7d, 0xdd441420, 0x38a2e2d5, 0xccd05f31, 0x2a49f3a6, 0xe533cc9b, 0xa18de92e, 0x495f684a, 0x0028e3ae, 0xd4072861, 0x370fd7a3, 0x728224bc, 0xa8b6b3d7, 0xdada7046, 0xea9e71df, 0x914f7d53, 0x9b796ac9, 0xe7f61a69, 0x67a68f71, 0x7eb15ce6, 0xeb9af9e1, 0xa75f54b1, 0x59210427, 0x75093378],  # noqa: E501
            [0x27866fea, 0x3bd84dca, 0x681d1d3a, 0xe7fb7496, 0x86fd9bf8, 0xc1f28786, 0xb3f17a06, 0x60c43dbe, 0x16fee1be, 0xa8407554, 0xca909e3b, 0xb1fc461c, 0xd84d663e, 0x2e7d669b, 0x5b5b5a56, 0x6c53d090, 0x236707a6, 0x7f1f4e97, 0xe95b23f3, 0x8cd1e3dd, 0x928f3212, 0x9c7c1c20, 0x00eeebe3, 0xc0572f52],  # noqa: E501
            [0xd1504060, 0x005d8a96, 0x058e317a, 0x30d9d3c6, 0xa585af56, 0x084c5111, 0x498da85e, 0x0149987d, 0xe130153b, 0x817cc725, 0x75f726b1, 0x23941339, 0x1f26e9dd, 0xdb013723, 0x81f36069, 0xe4167ba1, 0x50d59f82, 0xbf011350, 0x3ae71f42, 0x9966d041, 0xdbe09577, 0xa830b8f0, 0x0c018c2d, 0x08beab4f],  # noqa: E501
            [0x20898252, 0xac8aa337, 0x5c5bbcad, 0x2fa58f41, 0xf2446068, 0xfff46a79, 0x0b1980d8, 0x01b14c53, 0x4e432072, 0xfc610a31, 0x80ba5531, 0xc14507a5, 0x2433c5d2, 0x8a461cf3, 0x187849cd, 0x3d4f51e8, 0x3d9cd125, 0xe15e09ca, 0x8c6287c6, 0xfa0ec2f4, 0x65435f29, 0xd33a4f3d, 0xd61bb963, 0x991005f9],  # noqa: E501
            [0x00d80bd4, 0x3d8b3d56, 0xcc18a7a9, 0x0105e9bb, 0x71f0e736, 0x4cc71fa4, 0x1a2ec96b, 0xe1b8b093, 0x329232ab, 0xb4285526, 0x02326fe9, 0xe79accab, 0xd893b618, 0x9bd74bd5, 0x2062577c, 0x94f82da9, 0xb551d97a, 0x862483f0, 0x5f8e4e3e, 0x098d5e44, 0xbe326102, 0x4f5f050e, 0x1bd571d5, 0xcdd8e583],  # noqa: E501
            [0x1b525e1b, 0x1cccb851, 0x45b3c777, 0x63cc9153, 0xdfa0fd4a, 0x0cf20c06, 0x72fdd2f3, 0xf9b6f564, 0x9552a62b, 0x1e848099, 0x3ba1a5a6, 0x17ff06e0, 0x8cae82ed, 0xb5b29fbc, 0x9322d5a6, 0x77f40c4c, 0x0843ce60, 0x86ddb97f, 0xe5a12a04, 0x9bd65cd6, 0x1b16bea6, 0xf4066cee, 0xdcb3c788, 0x499b6483],  # noqa: E501
        ]]
        # fmt:on
